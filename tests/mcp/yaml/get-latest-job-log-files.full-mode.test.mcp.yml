---
description: "Test get_latest_job_log_files tool in full mode - Optimized for YAML/Aegis testing"
tests:
  # Core functionality test with comprehensive content validation
  - it: "should retrieve job log files with complete format validation"
    request:
      jsonrpc: "2.0"
      id: "job-files-complete"
      method: "tools/call"
      params:
        name: "get_latest_job_log_files"
        arguments:
          limit: 1
    expect:
      response:
        jsonrpc: "2.0"
        id: "job-files-complete"
        result:
          content:
            match:arrayElements:
              type: "text"
              # Response is JSON-encoded, so match the quoted content with escaped newlines
              text: "match:regex:\"Found 1 job logs:[\\s\\S]*ðŸ”§ Job: [A-Za-z]+[\\s\\S]*ID: [0-9]+[\\s\\S]*File: Job-[A-Za-z]+-[0-9]+\\.log[\\s\\S]*Modified: [A-Za-z]{3}, [0-9]{2} [A-Za-z]{3} [0-9]{4} [0-9]{2}:[0-9]{2}:[0-9]{2} GMT[\\s\\S]*Size: [0-9]+\\.[0-9]+ [A-Z]B\""
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  # Test default behavior (no limit parameter)
  - it: "should retrieve job log files with default parameters"
    request:
      jsonrpc: "2.0"
      id: "job-files-default"
      method: "tools/call"
      params:
        name: "get_latest_job_log_files"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "job-files-default"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:contains:Found"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  # Test limit parameter functionality
  - it: "should respect limit parameter"
    request:
      jsonrpc: "2.0"
      id: "job-files-limit"
      method: "tools/call"
      params:
        name: "get_latest_job_log_files"
        arguments:
          limit: 5
    expect:
      response:
        jsonrpc: "2.0"
        id: "job-files-limit"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:contains:job logs:"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  # Response structure validation
  - it: "should return proper MCP response structure"
    request:
      jsonrpc: "2.0"
      id: "job-files-structure"
      method: "tools/call"
      params:
        name: "get_latest_job_log_files"
        arguments:
          limit: 1
    expect:
      response:
        jsonrpc: "2.0"
        id: "job-files-structure"
        result:
          content: "match:type:array"
          isError: "match:type:boolean"
      stderr: "toBeEmpty"

  # Error handling: zero limit
  - it: "should reject zero limit parameter"
    request:
      jsonrpc: "2.0"
      id: "job-files-zero-limit"
      method: "tools/call"
      params:
        name: "get_latest_job_log_files"
        arguments:
          limit: 0
    expect:
      response:
        jsonrpc: "2.0"
        id: "job-files-zero-limit"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:contains:Invalid limit '0' for tool"
          isError: true
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "1000ms"

  # Error handling: negative limit
  - it: "should reject negative limit parameter"
    request:
      jsonrpc: "2.0"
      id: "job-files-negative-limit"
      method: "tools/call"
      params:
        name: "get_latest_job_log_files"
        arguments:
          limit: -1
    expect:
      response:
        jsonrpc: "2.0"
        id: "job-files-negative-limit"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:contains:Invalid limit '-1' for tool"
          isError: true
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "1000ms"

  # Error handling: invalid limit type
  - it: "should reject invalid limit parameter type"
    request:
      jsonrpc: "2.0"
      id: "job-files-invalid-limit"
      method: "tools/call"
      params:
        name: "get_latest_job_log_files"
        arguments:
          limit: "invalid"
    expect:
      response:
        jsonrpc: "2.0"
        id: "job-files-invalid-limit"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:contains:Invalid limit 'invalid' for tool. Must be a valid number"
          isError: true
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "1000ms"

  # Performance validation for successful operations
  - it: "should meet performance requirements for successful operations"
    request:
      jsonrpc: "2.0"
      id: "job-files-performance"
      method: "tools/call"
      params:
        name: "get_latest_job_log_files"
        arguments:
          limit: 10
    expect:
      response:
        jsonrpc: "2.0"
        id: "job-files-performance"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:type:string"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"
