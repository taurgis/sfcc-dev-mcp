---
description: "Test get_latest_error tool in full mode (focused YAML tests - complex scenarios covered in Node.js)"
tests:
  # Basic functionality tests
  - it: "should retrieve error messages with default parameters"
    request:
      jsonrpc: "2.0"
      id: "error-default"
      method: "tools/call"
      params:
        name: "get_latest_error"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "error-default"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:contains:Latest 10 error messages"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  - it: "should respect limit parameter"
    request:
      jsonrpc: "2.0"
      id: "error-limit"
      method: "tools/call"
      params:
        name: "get_latest_error"
        arguments:
          limit: 3
    expect:
      response:
        jsonrpc: "2.0"
        id: "error-limit"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:contains:Latest 3 error messages"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  # Basic content validation (detailed validation in Node.js tests)
  - it: "should include basic SFCC log structure elements"
    request:
      jsonrpc: "2.0"
      id: "error-structure"
      method: "tools/call"
      params:
        name: "get_latest_error"
        arguments:
          limit: 2
    expect:
      response:
        jsonrpc: "2.0"
        id: "error-structure"
        result:
          content:
            match:arrayElements:
              match:partial:
                text: "match:regex:error-blade-[\\d]{8}-[\\d]{6}\\.log[\\s\\S]*ERROR[\\s\\S]*GMT"
          isError: false
      stderr: "toBeEmpty"

  # Parameter validation tests (core error cases)
  - it: "should reject string limit parameter"
    request:
      jsonrpc: "2.0"
      id: "error-string-limit"
      method: "tools/call"
      params:
        name: "get_latest_error"
        arguments:
          limit: "5"
    expect:
      response:
        jsonrpc: "2.0"
        id: "error-string-limit"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:contains:Invalid limit '5'"
          isError: true
      stderr: "toBeEmpty"

  - it: "should reject zero limit parameter"
    request:
      jsonrpc: "2.0"
      id: "error-zero-limit"
      method: "tools/call"
      params:
        name: "get_latest_error"
        arguments:
          limit: 0
    expect:
      response:
        jsonrpc: "2.0"
        id: "error-zero-limit"
        result:
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:Invalid limit '0'"
          isError: true
      stderr: "toBeEmpty"

  - it: "should reject negative limit parameter"
    request:
      jsonrpc: "2.0"
      id: "error-negative-limit"
      method: "tools/call"
      params:
        name: "get_latest_error"
        arguments:
          limit: -5
    expect:
      response:
        jsonrpc: "2.0"
        id: "error-negative-limit"
        result:
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:Invalid limit"
          isError: true
      stderr: "toBeEmpty"

  # Date parameter basic validation
  - it: "should handle valid date parameter"
    request:
      jsonrpc: "2.0"
      id: "error-valid-date"
      method: "tools/call"
      params:
        name: "get_latest_error"
        arguments:
          date: "20240101"
          limit: 1
    expect:
      response:
        jsonrpc: "2.0"
        id: "error-valid-date"
        result:
          content: "match:type:array"
          isError: false
      stderr: "toBeEmpty"

  # Performance validation (basic)
  - it: "should respond quickly for small limits"
    request:
      jsonrpc: "2.0"
      id: "error-perf-small"
      method: "tools/call"
      params:
        name: "get_latest_error"
        arguments:
          limit: 1
    expect:
      response:
        jsonrpc: "2.0"
        id: "error-perf-small"
        result:
          content: "match:type:array"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "1500ms"

  # Response structure consistency
  - it: "should return consistent MCP response structure"
    request:
      jsonrpc: "2.0"
      id: "error-mcp-structure"
      method: "tools/call"
      params:
        name: "get_latest_error"
        arguments:
          limit: 1
    expect:
      response:
        jsonrpc: "2.0"
        id: "error-mcp-structure"
        result:
          match:partial:
            content: "match:type:array"
            isError: "match:type:boolean"
      stderr: "toBeEmpty"
