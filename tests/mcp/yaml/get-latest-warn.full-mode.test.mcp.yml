---
description: "Test get_latest_warn tool in full mode - focused on MCP response validation"
tests:
  # Core functionality validation
  - it: "should retrieve latest warn messages with default parameters"
    request:
      jsonrpc: "2.0"
      id: "warn-default"
      method: "tools/call"
      params:
        name: "get_latest_warn"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "warn-default"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:contains:Latest 10 warn messages"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  - it: "should respect limit parameter"
    request:
      jsonrpc: "2.0"
      id: "warn-limit"
      method: "tools/call"
      params:
        name: "get_latest_warn"
        arguments:
          limit: 3
    expect:
      response:
        jsonrpc: "2.0"
        id: "warn-limit"
        result:
          content:
            match:arrayElements:
              match:partial:
                text: "match:regex:Latest 3 warn messages[\\s\\S]*warn-blade-[\\d]{8}-[\\d]{6}\\.log[\\s\\S]*WARN[\\s\\S]*GMT"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  # Core log structure validation in one comprehensive test
  - it: "should contain proper SFCC log structure elements"
    request:
      jsonrpc: "2.0"
      id: "warn-structure"
      method: "tools/call"
      params:
        name: "get_latest_warn"
        arguments:
          limit: 2
    expect:
      response:
        jsonrpc: "2.0"
        id: "warn-structure"
        result:
          content:
            match:arrayElements:
              match:partial:
                # Validates: log filename, timestamp, WARN level, Sites info, separators in one test
                text: "match:regex:warn-blade-[\\d]{8}-[\\d]{6}\\.log[\\s\\S]*[\\d]{4}-[\\d]{2}-[\\d]{2} [\\d]{2}:[\\d]{2}:[\\d]{2}\\.[\\d]{3} GMT[\\s\\S]*WARN PipelineCallServlet[\\s\\S]*Sites-[\\s\\S]*---"
          isError: false
      stderr: "toBeEmpty"

  # Error handling validation (key validation patterns)
  - it: "should handle string limit parameter with proper error message"
    request:
      jsonrpc: "2.0"
      id: "warn-string-limit"
      method: "tools/call"
      params:
        name: "get_latest_warn"
        arguments:
          limit: "5"
    expect:
      response:
        jsonrpc: "2.0"
        id: "warn-string-limit"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:regex:Error: Invalid limit '5'[\\s\\S]*Must be a valid number"
          isError: true
      stderr: "toBeEmpty"

  - it: "should handle zero limit with proper error message"
    request:
      jsonrpc: "2.0"
      id: "warn-zero-limit"
      method: "tools/call"
      params:
        name: "get_latest_warn"
        arguments:
          limit: 0
    expect:
      response:
        jsonrpc: "2.0"
        id: "warn-zero-limit"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:regex:Error: Invalid limit '0'[\\s\\S]*Must be between 1 and 1000"
          isError: true
      stderr: "toBeEmpty"

  - it: "should handle negative limit with proper error message"
    request:
      jsonrpc: "2.0"
      id: "warn-negative-limit"
      method: "tools/call"
      params:
        name: "get_latest_warn"
        arguments:
          limit: -5
    expect:
      response:
        jsonrpc: "2.0"
        id: "warn-negative-limit"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:contains:Error: Invalid limit '-5'"
          isError: true
      stderr: "toBeEmpty"

  # Edge case - large limit handling
  - it: "should handle large limit values appropriately"
    request:
      jsonrpc: "2.0"
      id: "warn-large-limit"
      method: "tools/call"
      params:
        name: "get_latest_warn"
        arguments:
          limit: 50
    expect:
      response:
        jsonrpc: "2.0"
        id: "warn-large-limit"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:contains:Latest 50 warn messages"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "3000ms"

  # Date parameter edge case
  - it: "should handle invalid date format gracefully"
    request:
      jsonrpc: "2.0"
      id: "warn-invalid-date"
      method: "tools/call"
      params:
        name: "get_latest_warn"
        arguments:
          date: "invalid-date"
          limit: 1
    expect:
      response:
        jsonrpc: "2.0"
        id: "warn-invalid-date"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:type:string"
          isError: false
      stderr: "toBeEmpty"
