---
# Optimized YAML tests for get_latest_debug tool - focuses on MCP protocol compliance and basic functionality
# Complex content validation, performance testing, and detailed parameter validation are handled in the programmatic tests
# These tests primarily validate aegis testing framework integration and basic MCP responses
description: "Test get_latest_debug tool in full mode - Basic MCP protocol and parameter validation"
tests:
  # ========================================
  # MCP PROTOCOL COMPLIANCE
  # ========================================

  - it: "should return valid MCP response structure with default parameters"
    request:
      jsonrpc: "2.0"
      id: "debug-default"
      method: "tools/call"
      params:
        name: "get_latest_debug"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "debug-default"
        result:
          content:
            match:arrayElements:
              match:partial:
                type: "text"
                text: "match:type:string"
          isError: "match:type:boolean"
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  - it: "should contain expected content structure for default limit"
    request:
      jsonrpc: "2.0"
      id: "debug-content"
      method: "tools/call"
      params:
        name: "get_latest_debug"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "debug-content"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:contains:Latest 10 debug messages"
          isError: false
      stderr: "toBeEmpty"

  # ========================================
  # PARAMETER VALIDATION
  # ========================================

  - it: "should respect limit parameter"
    request:
      jsonrpc: "2.0"
      id: "debug-limit"
      method: "tools/call"
      params:
        name: "get_latest_debug"
        arguments:
          limit: 3
    expect:
      response:
        jsonrpc: "2.0"
        id: "debug-limit"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:contains:Latest 3 debug messages"
          isError: false
      stderr: "toBeEmpty"

  - it: "should handle date parameter"
    request:
      jsonrpc: "2.0"
      id: "debug-date"
      method: "tools/call"
      params:
        name: "get_latest_debug"
        arguments:
          date: "20240101"
          limit: 2
    expect:
      response:
        jsonrpc: "2.0"
        id: "debug-date"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:type:string"
          isError: false
      stderr: "toBeEmpty"

  # ========================================
  # ERROR HANDLING
  # ========================================

  - it: "should reject invalid string limit parameter"
    request:
      jsonrpc: "2.0"
      id: "debug-string-limit"
      method: "tools/call"
      params:
        name: "get_latest_debug"
        arguments:
          limit: "5"
    expect:
      response:
        jsonrpc: "2.0"
        id: "debug-string-limit"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:contains:Invalid limit '5' for get_latest_debug. Must be a valid number"
          isError: true
      stderr: "toBeEmpty"

  - it: "should reject zero limit parameter"
    request:
      jsonrpc: "2.0"
      id: "debug-zero-limit"
      method: "tools/call"
      params:
        name: "get_latest_debug"
        arguments:
          limit: 0
    expect:
      response:
        jsonrpc: "2.0"
        id: "debug-zero-limit"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:contains:Invalid limit '0'"
          isError: true
      stderr: "toBeEmpty"

  # ========================================
  # BASIC CONTENT VALIDATION
  # ========================================

  - it: "should include basic SFCC log elements"
    request:
      jsonrpc: "2.0"
      id: "debug-basic-content"
      method: "tools/call"
      params:
        name: "get_latest_debug"
        arguments:
          limit: 2
    expect:
      response:
        jsonrpc: "2.0"
        id: "debug-basic-content"
        result:
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:DEBUG"
          isError: false
      stderr: "toBeEmpty"

  - it: "should include log file names in response"
    request:
      jsonrpc: "2.0"
      id: "debug-filenames"
      method: "tools/call"
      params:
        name: "get_latest_debug"
        arguments:
          limit: 1
    expect:
      response:
        jsonrpc: "2.0"
        id: "debug-filenames"
        result:
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:debug-blade-"
          isError: false
      stderr: "toBeEmpty"
