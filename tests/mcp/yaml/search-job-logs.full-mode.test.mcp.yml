---
description: "Optimized search_job_logs tool tests for aegis framework validation"
tests:
  # Essential functionality tests - focus on MCP protocol and aegis pattern matching
  - it: "should search for patterns with basic functionality"
    request:
      jsonrpc: "2.0"
      id: "search-basic"
      method: "tools/call"
      params:
        name: "search_job_logs"
        arguments:
          pattern: "INFO"
          limit: 3
    expect:
      response:
        jsonrpc: "2.0"
        id: "search-basic"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:contains:Found"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  - it: "should combine all parameters effectively"
    request:
      jsonrpc: "2.0"
      id: "search-combined"
      method: "tools/call"
      params:
        name: "search_job_logs"
        arguments:
          pattern: "job"
          level: "info"
          limit: 2
          jobName: "ImportCatalog"
    expect:
      response:
        jsonrpc: "2.0"
        id: "search-combined"
        result:
          content:
            match:arrayElements:
              match:partial:
                type: "text"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  # Content validation - test response structure and format
  - it: "should return properly formatted job log entries with timestamps"
    request:
      jsonrpc: "2.0"
      id: "search-format"
      method: "tools/call"
      params:
        name: "search_job_logs"
        arguments:
          pattern: "Executing"
          limit: 1
    expect:
      response:
        jsonrpc: "2.0"
        id: "search-format"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:regex:\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{3} GMT"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  # Edge cases - essential for aegis testing
  - it: "should handle no matches gracefully"
    request:
      jsonrpc: "2.0"
      id: "search-no-matches"
      method: "tools/call"
      params:
        name: "search_job_logs"
        arguments:
          pattern: "ZZZNOTHINGFOUND"
    expect:
      response:
        jsonrpc: "2.0"
        id: "search-no-matches"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:contains:No matches found"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  # Critical error handling - test MCP error responses
  - it: "should handle missing pattern parameter"
    request:
      jsonrpc: "2.0"
      id: "search-missing-pattern"
      method: "tools/call"
      params:
        name: "search_job_logs"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "search-missing-pattern"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:contains:pattern must be a non-empty string"
          isError: true
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "1000ms"

  - it: "should validate parameter types"
    request:
      jsonrpc: "2.0"
      id: "search-invalid-limit"
      method: "tools/call"
      params:
        name: "search_job_logs"
        arguments:
          pattern: "INFO"
          limit: "invalid"
    expect:
      response:
        jsonrpc: "2.0"
        id: "search-invalid-limit"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:contains:Invalid limit"
          isError: true
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "1000ms"

  # Performance validation for aegis
  - it: "should handle large search operations efficiently"
    request:
      jsonrpc: "2.0"
      id: "search-performance"
      method: "tools/call"
      params:
        name: "search_job_logs"
        arguments:
          pattern: "step"
          limit: 50
    expect:
      response:
        jsonrpc: "2.0"
        id: "search-performance"
        result:
          content:
            match:arrayElements:
              match:partial:
                type: "text"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "3000ms"
