---
description: "Test get_job_execution_summary tool in full mode (YAML/Aegis framework validation)"
tests:
  # Core functionality - test basic success case with actual response format
  - it: "should retrieve job execution summary with proper structure"
    request:
      jsonrpc: "2.0"
      id: "job-summary-basic"
      method: "tools/call"
      params:
        name: "get_job_execution_summary"
        arguments:
          jobName: "ImportCatalog"
    expect:
      response:
        jsonrpc: "2.0"
        id: "job-summary-basic"
        result:
          content:
            match:arrayLength:1
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  # Test response content format for existing job (based on aegis discovery)
  - it: "should return formatted execution summary with timing and status sections"
    request:
      jsonrpc: "2.0"
      id: "job-summary-format"
      method: "tools/call"
      params:
        name: "get_job_execution_summary"
        arguments:
          jobName: "ImportCatalog"
    expect:
      response:
        jsonrpc: "2.0"
        id: "job-summary-format"
        result:
          content:
            match:arrayElements:
              match:partial:
                type: "text"
                text: "match:regex:Job Execution Summary: ImportCatalog[\\s\\S]*‚è±Ô∏è Timing:[\\s\\S]*üìä Status:"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  # Test non-existent job handling (based on aegis discovery)
  - it: "should handle non-existent job gracefully"
    request:
      jsonrpc: "2.0"
      id: "job-summary-nonexistent"
      method: "tools/call"
      params:
        name: "get_job_execution_summary"
        arguments:
          jobName: "NonExistentJob"
    expect:
      response:
        jsonrpc: "2.0"
        id: "job-summary-nonexistent"
        result:
          content:
            match:arrayElements:
              match:partial:
                type: "text"
                text: "match:contains:No job logs found for job name: NonExistentJob"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "1500ms"

  # Essential error validation - missing parameter (based on aegis discovery)
  - it: "should return error for missing jobName parameter"
    request:
      jsonrpc: "2.0"
      id: "job-summary-missing-param"
      method: "tools/call"
      params:
        name: "get_job_execution_summary"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "job-summary-missing-param"
        result:
          content:
            match:arrayElements:
              match:partial:
                type: "text"
                text: "match:contains:Error: jobName must be a non-empty string"
          isError: true
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "800ms"

  # Essential error validation - empty string (based on aegis discovery)
  - it: "should return error for empty jobName parameter"
    request:
      jsonrpc: "2.0"
      id: "job-summary-empty-param"
      method: "tools/call"
      params:
        name: "get_job_execution_summary"
        arguments:
          jobName: ""
    expect:
      response:
        jsonrpc: "2.0"
        id: "job-summary-empty-param"
        result:
          content:
            match:arrayElements:
              match:partial:
                type: "text"
                text: "match:contains:Error: jobName must be a non-empty string"
          isError: true
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "800ms"

  # Test response structure consistency
  - it: "should return consistent MCP response structure"
    request:
      jsonrpc: "2.0"
      id: "job-summary-structure"
      method: "tools/call"
      params:
        name: "get_job_execution_summary"
        arguments:
          jobName: "ImportCatalog"
    expect:
      response:
        jsonrpc: "2.0"
        id: "job-summary-structure"
        result:
          content:
            match:arrayElements:
              match:partial:
                type: "text"
                text: "match:type:string"
          isError: "match:type:boolean"
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"
