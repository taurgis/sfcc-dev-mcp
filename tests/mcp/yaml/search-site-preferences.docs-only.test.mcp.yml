# ==================================================================================
# SFCC MCP Server - search_site_preferences Tool YAML Tests (Docs-Only Mode)
# Validates that site preferences search tools are NOT available in docs-only mode
# This tool requires SFCC credentials and should not be available without them
# 
# Quick Test Commands:
# aegis "tests/mcp/yaml/search-site-preferences.docs-only.test.mcp.yml" --config "aegis.config.docs-only.json" --verbose
# aegis query search_site_preferences '{"groupId": "Storefront", "instanceType": "sandbox", "searchRequest": {"query": {"match_all_query": {}}}}' --config "aegis.config.docs-only.json"
# ==================================================================================

description: "search_site_preferences tool docs-only mode tests - Tool unavailability validation"

tests:
  # ==================================================================================
  # TOOL UNAVAILABILITY IN DOCS-ONLY MODE
  # ==================================================================================
  - it: "should NOT list search_site_preferences tool in docs-only mode"
    request:
      jsonrpc: "2.0"
      id: "tool-not-available-docs"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "tool-not-available-docs"
        result:
          tools:
            match:arrayElements:
              match:partial:
                name: "match:type:string"
                description: "match:type:string"
          match:extractField: "tools.*.name"
          value: "match:not:arrayContains:search_site_preferences"
      stderr: "toBeEmpty"

  # ==================================================================================
  # AUTHENTICATION ERROR TESTS (Tool Can Be Called But Returns Error)
  # ==================================================================================
  - it: "should return authentication error when calling search_site_preferences in docs-only mode"
    request:
      jsonrpc: "2.0"
      id: "auth-error-storefront"
      method: "tools/call"
      params:
        name: "search_site_preferences"
        arguments:
          groupId: "Storefront"
          instanceType: "sandbox"
          searchRequest:
            query:
              match_all_query: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "auth-error-storefront"
        result:
          content:
            - type: "text"
              text: "match:contains:OCAPI client not configured"
          isError: true
      performance:
        maxResponseTime: "500ms"
      stderr: "toBeEmpty"

  - it: "should return authentication error for text query search requests"
    request:
      jsonrpc: "2.0"
      id: "auth-error-text-query"
      method: "tools/call"
      params:
        name: "search_site_preferences"
        arguments:
          groupId: "System"
          instanceType: "development"
          searchRequest:
            query:
              text_query:
                fields: ["id", "display_name"]
                search_phrase: "test"
    expect:
      response:
        jsonrpc: "2.0"
        id: "auth-error-text-query"
        result:
          content:
            - type: "text"
              text: "match:contains:credentials are provided"
          isError: true
      performance:
        maxResponseTime: "500ms"
      stderr: "toBeEmpty"

  - it: "should return authentication error for term query requests"
    request:
      jsonrpc: "2.0"
      id: "auth-error-term-query"
      method: "tools/call"
      params:
        name: "search_site_preferences"
        arguments:
          groupId: "SFRA"
          instanceType: "staging"
          searchRequest:
            query:
              term_query:
                fields: ["value_type"]
                operator: "is"
                values: ["string"]
    expect:
      response:
        jsonrpc: "2.0"
        id: "auth-error-term-query"
        result:
          content:
            - type: "text"
              text: "match:contains:OCAPI client not configured"
          isError: true
      performance:
        maxResponseTime: "500ms"
      stderr: "toBeEmpty"

  - it: "should return authentication error for boolean query requests"
    request:
      jsonrpc: "2.0"
      id: "auth-error-bool-query"
      method: "tools/call"
      params:
        name: "search_site_preferences"
        arguments:
          groupId: "Integration"
          instanceType: "production"
          searchRequest:
            query:
              bool_query:
                must:
                  - text_query:
                      fields: ["id"]
                      search_phrase: "api"
    expect:
      response:
        jsonrpc: "2.0"
        id: "auth-error-bool-query"
        result:
          content:
            - type: "text"
              text: "match:contains:ensure credentials are provided"
          isError: true
      performance:
        maxResponseTime: "500ms"
      stderr: "toBeEmpty"

  - it: "should return authentication error regardless of instance type"
    request:
      jsonrpc: "2.0"
      id: "auth-error-sandbox"
      method: "tools/call"
      params:
        name: "search_site_preferences"
        arguments:
          groupId: "CCV"
          instanceType: "sandbox"
          searchRequest:
            query:
              match_all_query: {}
            count: 5
    expect:
      response:
        jsonrpc: "2.0"
        id: "auth-error-sandbox"
        result:
          content:
            - type: "text"
              text: "match:contains:OCAPI client not configured"
          isError: true
      performance:
        maxResponseTime: "500ms"
      stderr: "toBeEmpty"

  - it: "should return authentication error with options parameter"
    request:
      jsonrpc: "2.0"
      id: "auth-error-with-options"
      method: "tools/call"
      params:
        name: "search_site_preferences"
        arguments:
          groupId: "Storefront"
          instanceType: "sandbox"
          searchRequest:
            query:
              match_all_query: {}
          options:
            maskPasswords: false
            expand: "value"
    expect:
      response:
        jsonrpc: "2.0"
        id: "auth-error-with-options"
        result:
          content:
            - type: "text"
              text: "match:contains:OCAPI client not configured"
          isError: true
      performance:
        maxResponseTime: "500ms"
      stderr: "toBeEmpty"

  # ==================================================================================
  # PARAMETER VALIDATION IN DOCS-ONLY MODE
  # ==================================================================================
  - it: "should return authentication error even with missing required parameters"
    request:
      jsonrpc: "2.0"
      id: "auth-error-missing-params"
      method: "tools/call"
      params:
        name: "search_site_preferences"
        arguments:
          groupId: "Storefront"
          # Missing instanceType and searchRequest - but should get auth error first
    expect:
      response:
        jsonrpc: "2.0"
        id: "auth-error-missing-params"
        result:
          content:
            - type: "text"
              text: "match:regex:(OCAPI client not configured|required)"
          isError: true
      performance:
        maxResponseTime: "500ms"
      stderr: "toBeEmpty"

  # ==================================================================================
  # CONSISTENT ERROR MESSAGING
  # ==================================================================================
  - it: "should provide consistent error message across different preference groups"
    request:
      jsonrpc: "2.0"
      id: "consistent-error-message"
      method: "tools/call"
      params:
        name: "search_site_preferences"
        arguments:
          groupId: "FastForward"
          instanceType: "development"
          searchRequest:
            query:
              text_query:
                fields: ["description"]
                search_phrase: "feature"
    expect:
      response:
        jsonrpc: "2.0"
        id: "consistent-error-message"
        result:
          content:
            - type: "text"
              text: "match:regex:(OCAPI client not configured|ensure credentials are provided)"
          isError: true
      performance:
        maxResponseTime: "500ms"
      stderr: "toBeEmpty"

  # ==================================================================================
  # FAST ERROR RESPONSE VALIDATION
  # ==================================================================================
  - it: "should return authentication errors quickly without OCAPI calls"
    request:
      jsonrpc: "2.0"
      id: "fast-auth-error"
      method: "tools/call"
      params:
        name: "search_site_preferences"
        arguments:
          groupId: "Storefront"
          instanceType: "sandbox"
          searchRequest:
            query:
              match_all_query: {}
            count: 100
            start: 0
    expect:
      response:
        jsonrpc: "2.0"
        id: "fast-auth-error"
        result:
          content:
            - type: "text"
              text: "match:contains:OCAPI client not configured"
          isError: true
      performance:
        maxResponseTime: "300ms"  # Should be very fast since no actual API call
      stderr: "toBeEmpty"