# ==================================================================================
# SFCC MCP Server - search_system_object_attribute_definitions Tool YAML Tests (Full Mode)
# Streamlined smoke testing and declarative validation for core functionality
# Complex business logic, edge cases, and workflows are covered in programmatic tests
# 
# Quick Test Commands:
# aegis "tests/mcp/yaml/search-system-object-attribute-definitions.full-mode.test.mcp.yml" --config "aegis.config.with-dw.json" --verbose
# aegis query search_system_object_attribute_definitions '{"objectType": "Product", "searchRequest": {"query": {"match_all_query": {}}, "count": 5}}' --config "aegis.config.with-dw.json"
# ==================================================================================

description: "search_system_object_attribute_definitions tool smoke tests - Basic functionality validation"

tests:
  # ==================================================================================
  # TOOL AVAILABILITY VALIDATION
  # ==================================================================================
  - it: "should have search_system_object_attribute_definitions tool available with proper schema"
    request:
      jsonrpc: "2.0"
      id: "tool-available"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "tool-available"
        result:
          tools:
            match:arrayElements:
              match:partial:
                name: "match:type:string"
                description: "match:type:string"
          match:extractField: "tools.*.name"
          value: "match:arrayContains:search_system_object_attribute_definitions"
      stderr: "toBeEmpty"

  # ==================================================================================
  # CORE FUNCTIONALITY VALIDATION - match_all_query
  # ==================================================================================
  - it: "should successfully search Product attributes with match_all_query and return valid structure"
    request:
      jsonrpc: "2.0"
      id: "match-all-success"
      method: "tools/call"
      params:
        name: "search_system_object_attribute_definitions"
        arguments:
          objectType: "Product"
          searchRequest:
            query:
              match_all_query: {}
            count: 5
    expect:
      response:
        jsonrpc: "2.0"
        id: "match-all-success"
        result:
          content:
            - type: "text"
              text: "match:contains:object_attribute_definition_search_result"
          isError: false
      performance:
        maxResponseTime: "2000ms"
      stderr: "toBeEmpty"

  - it: "should return valid JSON structure with pagination in match_all_query response"
    request:
      jsonrpc: "2.0"
      id: "match-all-structure"
      method: "tools/call"
      params:
        name: "search_system_object_attribute_definitions"
        arguments:
          objectType: "Product"
          searchRequest:
            query:
              match_all_query: {}
            count: 3
    expect:
      response:
        jsonrpc: "2.0"
        id: "match-all-structure"
        result:
          content:
            - type: "text"
              text: "match:regex:[\\s\\S]*\"_type\"[\\s\\S]*\"object_attribute_definition_search_result\"[\\s\\S]*"
          isError: false
      stderr: "toBeEmpty"

  - it: "should include query echo and pagination info in match_all_query response"
    request:
      jsonrpc: "2.0"
      id: "match-all-metadata"
      method: "tools/call"
      params:
        name: "search_system_object_attribute_definitions"
        arguments:
          objectType: "Product"
          searchRequest:
            query:
              match_all_query: {}
            count: 5
            start: 0
    expect:
      response:
        jsonrpc: "2.0"
        id: "match-all-metadata"
        result:
          content:
            - type: "text"
              text: "match:regex:[\\s\\S]*\"query\"[\\s\\S]*\"match_all_query\"[\\s\\S]*\"start\"[\\s\\S]*\"total\"[\\s\\S]*"
          isError: false
      stderr: "toBeEmpty"

  # ==================================================================================
  # CORE FUNCTIONALITY VALIDATION - text_query
  # ==================================================================================
  - it: "should successfully search with text_query and return matching results"
    request:
      jsonrpc: "2.0"
      id: "text-query-success"
      method: "tools/call"
      params:
        name: "search_system_object_attribute_definitions"
        arguments:
          objectType: "Product"
          searchRequest:
            query:
              text_query:
                fields: ["id", "display_name"]
                search_phrase: "UPC"
            count: 3
    expect:
      response:
        jsonrpc: "2.0"
        id: "text-query-success"
        result:
          content:
            - type: "text"
              text: "match:contains:object_attribute_definition_search_result"
          isError: false
      performance:
        maxResponseTime: "2000ms"
      stderr: "toBeEmpty"

  - it: "should echo text_query parameters in response"
    request:
      jsonrpc: "2.0"
      id: "text-query-echo"
      method: "tools/call"
      params:
        name: "search_system_object_attribute_definitions"
        arguments:
          objectType: "Product"
          searchRequest:
            query:
              text_query:
                fields: ["id", "display_name"]
                search_phrase: "UPC"
    expect:
      response:
        jsonrpc: "2.0"
        id: "text-query-echo"
        result:
          content:
            - type: "text"
              text: "match:regex:[\\s\\S]*\"text_query\"[\\s\\S]*\"fields\"[\\s\\S]*\"search_phrase\"[\\s\\S]*\"UPC\"[\\s\\S]*"
          isError: false
      stderr: "toBeEmpty"

  # ==================================================================================
  # CORE FUNCTIONALITY VALIDATION - term_query
  # ==================================================================================
  - it: "should successfully search with term_query using exact matching"
    request:
      jsonrpc: "2.0"
      id: "term-query-success"
      method: "tools/call"
      params:
        name: "search_system_object_attribute_definitions"
        arguments:
          objectType: "Product"
          searchRequest:
            query:
              term_query:
                fields: ["value_type"]
                operator: "is"
                values: ["string"]
            count: 5
    expect:
      response:
        jsonrpc: "2.0"
        id: "term-query-success"
        result:
          content:
            - type: "text"
              text: "match:contains:object_attribute_definition_search_result"
          isError: false
      performance:
        maxResponseTime: "2000ms"
      stderr: "toBeEmpty"

  - it: "should echo term_query parameters correctly"
    request:
      jsonrpc: "2.0"
      id: "term-query-echo"
      method: "tools/call"
      params:
        name: "search_system_object_attribute_definitions"
        arguments:
          objectType: "Product"
          searchRequest:
            query:
              term_query:
                fields: ["value_type"]
                operator: "is"
                values: ["string"]
    expect:
      response:
        jsonrpc: "2.0"
        id: "term-query-echo"
        result:
          content:
            - type: "text"
              text: "match:regex:[\\s\\S]*\"term_query\"[\\s\\S]*\"fields\"[\\s\\S]*\"operator\"[\\s\\S]*\"is\"[\\s\\S]*\"values\"[\\s\\S]*"
          isError: false
      stderr: "toBeEmpty"

  # ==================================================================================
  # PAGINATION AND SORTING VALIDATION
  # ==================================================================================
  - it: "should handle pagination parameters correctly"
    request:
      jsonrpc: "2.0"
      id: "pagination-test"
      method: "tools/call"
      params:
        name: "search_system_object_attribute_definitions"
        arguments:
          objectType: "Product"
          searchRequest:
            query:
              match_all_query: {}
            start: 5
            count: 3
    expect:
      response:
        jsonrpc: "2.0"
        id: "pagination-test"
        result:
          content:
            - type: "text"
              text: "match:regex:[\\s\\S]*\"start\"[\\s\\S]*5[\\s\\S]*\"count\"[\\s\\S]*3[\\s\\S]*"
          isError: false
      performance:
        maxResponseTime: "2000ms"
      stderr: "toBeEmpty"

  - it: "should handle sorting parameters correctly"
    request:
      jsonrpc: "2.0"
      id: "sorting-test"
      method: "tools/call"
      params:
        name: "search_system_object_attribute_definitions"
        arguments:
          objectType: "Product"
          searchRequest:
            query:
              match_all_query: {}
            sorts:
              - field: "id"
                sort_order: "asc"
            count: 5
    expect:
      response:
        jsonrpc: "2.0"
        id: "sorting-test"
        result:
          content:
            - type: "text"
              text: "match:contains:object_attribute_definition_search_result"
          isError: false
      performance:
        maxResponseTime: "2000ms"
      stderr: "toBeEmpty"

  # ==================================================================================
  # DIFFERENT OBJECT TYPES VALIDATION
  # ==================================================================================
  - it: "should handle Customer object type correctly"
    request:
      jsonrpc: "2.0"
      id: "customer-test"
      method: "tools/call"
      params:
        name: "search_system_object_attribute_definitions"
        arguments:
          objectType: "Customer"
          searchRequest:
            query:
              match_all_query: {}
            count: 3
    expect:
      response:
        jsonrpc: "2.0"
        id: "customer-test"
        result:
          content:
            - type: "text"
              text: "match:contains:object_attribute_definition_search_result"
          isError: false
      performance:
        maxResponseTime: "2000ms"
      stderr: "toBeEmpty"

  - it: "should handle Order object type correctly"
    request:
      jsonrpc: "2.0"
      id: "order-test"
      method: "tools/call"
      params:
        name: "search_system_object_attribute_definitions"
        arguments:
          objectType: "Order"
          searchRequest:
            query:
              match_all_query: {}
            count: 3
    expect:
      response:
        jsonrpc: "2.0"
        id: "order-test"
        result:
          content:
            - type: "text"
              text: "match:contains:object_attribute_definition_search_result"
          isError: false
      performance:
        maxResponseTime: "2000ms"
      stderr: "toBeEmpty"

  # ==================================================================================
  # PARAMETER VALIDATION
  # ==================================================================================
  - it: "should handle minimal parameters gracefully (only objectType)"
    request:
      jsonrpc: "2.0"
      id: "minimal-params"
      method: "tools/call"
      params:
        name: "search_system_object_attribute_definitions"
        arguments:
          objectType: "Product"
    expect:
      response:
        jsonrpc: "2.0"
        id: "minimal-params"
        result:
          content:
            - type: "text"
              text: "match:contains:object_attribute_definition_search_result"
          isError: false
      performance:
        maxResponseTime: "2000ms"
      stderr: "toBeEmpty"

  - it: "should handle invalid object type gracefully (returns empty results)"
    request:
      jsonrpc: "2.0"
      id: "invalid-object-type"
      method: "tools/call"
      params:
        name: "search_system_object_attribute_definitions"
        arguments:
          objectType: "NonExistentType"
          searchRequest:
            query:
              match_all_query: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "invalid-object-type"
        result:
          content:
            - type: "text"
              text: "match:contains:\"total\": 0"
          isError: false
      performance:
        maxResponseTime: "2000ms"
      stderr: "toBeEmpty"

  # ==================================================================================
  # PERFORMANCE VALIDATION
  # ==================================================================================
  - it: "should complete match_all_query operations within reasonable time"
    request:
      jsonrpc: "2.0"
      id: "perf-match-all"
      method: "tools/call"
      params:
        name: "search_system_object_attribute_definitions"
        arguments:
          objectType: "Product"
          searchRequest:
            query:
              match_all_query: {}
            count: 10
    expect:
      response:
        jsonrpc: "2.0"
        id: "perf-match-all"
        result:
          content:
            - type: "text"
              text: "match:contains:object_attribute_definition_search_result"
          isError: false
      performance:
        maxResponseTime: "1500ms"
      stderr: "toBeEmpty"

  - it: "should complete text_query operations within reasonable time"
    request:
      jsonrpc: "2.0"
      id: "perf-text-query"
      method: "tools/call"
      params:
        name: "search_system_object_attribute_definitions"
        arguments:
          objectType: "Product"
          searchRequest:
            query:
              text_query:
                fields: ["id", "display_name", "description"]
                search_phrase: "brand"
            count: 5
    expect:
      response:
        jsonrpc: "2.0"
        id: "perf-text-query"
        result:
          content:
            - type: "text"
              text: "match:contains:object_attribute_definition_search_result"
          isError: false
      performance:
        maxResponseTime: "2000ms"
      stderr: "toBeEmpty"

  # ==================================================================================
  # RESPONSE STRUCTURE VALIDATION
  # ==================================================================================
  - it: "should return properly structured SFCC API response format"
    request:
      jsonrpc: "2.0"
      id: "structure-validation"
      method: "tools/call"
      params:
        name: "search_system_object_attribute_definitions"
        arguments:
          objectType: "Product"
          searchRequest:
            query:
              match_all_query: {}
            count: 2
    expect:
      response:
        jsonrpc: "2.0"
        id: "structure-validation"
        result:
          content:
            - type: "text"
              text: "match:regex:[\\s\\S]*\"_v\"[\\s\\S]*\"_type\"[\\s\\S]*\"object_attribute_definition_search_result\"[\\s\\S]*\"hits\"[\\s\\S]*\"query\"[\\s\\S]*\"start\"[\\s\\S]*\"total\"[\\s\\S]*"
          isError: false
      stderr: "toBeEmpty"

  - it: "should include attribute definition details when available"
    request:
      jsonrpc: "2.0"
      id: "attribute-details"
      method: "tools/call"
      params:
        name: "search_system_object_attribute_definitions"
        arguments:
          objectType: "Product"
          searchRequest:
            query:
              match_all_query: {}
            count: 3
            select: "(**)"
    expect:
      response:
        jsonrpc: "2.0"
        id: "attribute-details"
        result:
          content:
            - type: "text"
              text: "match:regex:[\\s\\S]*\"_type\"[\\s\\S]*\"object_attribute_definition\"[\\s\\S]*\"id\"[\\s\\S]*\"link\"[\\s\\S]*"
          isError: false
      stderr: "toBeEmpty"