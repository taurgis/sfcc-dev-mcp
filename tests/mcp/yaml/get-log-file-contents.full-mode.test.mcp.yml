---
description: "Test get_log_file_contents tool in full mode - optimized for YAML/aegis testing"
tests:
  # === Basic Functionality ===
  - it: "should get log file contents with proper structure"
    request:
      jsonrpc: "2.0"
      id: "get-contents-basic"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: "jobs/ImportCatalog/Job-ImportCatalog-0987654321.log"
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-basic"
        result:
          content: "match:arrayLength:1"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "1500ms"

  - it: "should include essential metadata in response"
    request:
      jsonrpc: "2.0"
      id: "get-contents-metadata"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: "jobs/ImportCatalog/Job-ImportCatalog-0987654321.log"
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-metadata"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:contains:Log File Contents:"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "1500ms"

  - it: "should include timestamps in SFCC format"
    request:
      jsonrpc: "2.0"
      id: "get-contents-timestamps"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: "jobs/ImportCatalog/Job-ImportCatalog-0987654321.log"
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-timestamps"
        result:
          content:
            match:arrayElements:
              match:partial:
                text: "match:regex:\\[\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{3} GMT\\]"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "1500ms"

  # === Parameter Validation ===
  - it: "should work with maxBytes parameter"
    request:
      jsonrpc: "2.0"
      id: "get-contents-maxbytes"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: "jobs/ImportCatalog/Job-ImportCatalog-0987654321.log"
          maxBytes: 500
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-maxbytes"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:contains:Content size:"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "1000ms"

  - it: "should work with tailOnly parameter"
    request:
      jsonrpc: "2.0"
      id: "get-contents-tailonly"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: "jobs/ImportCatalog/Job-ImportCatalog-0987654321.log"
          tailOnly: true
          maxBytes: 200
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-tailonly"
        result:
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:tail read"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "1000ms"

  # === Error Handling ===
  - it: "should handle non-existent file gracefully"
    request:
      jsonrpc: "2.0"
      id: "get-contents-notfound"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: "nonexistent-file.log"
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-notfound"
        result:
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:Failed to get_log_file_contents"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "1500ms"

  - it: "should handle missing filename parameter"
    request:
      jsonrpc: "2.0"
      id: "get-contents-missing-filename"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-missing-filename"
        result:
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:filename must be a non-empty string"
          isError: true
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "800ms"

  - it: "should handle empty filename parameter"
    request:
      jsonrpc: "2.0"
      id: "get-contents-empty-filename"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: ""
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-empty-filename"
        result:
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:filename must be a non-empty string"
          isError: true
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "800ms"

  - it: "should handle invalid maxBytes parameter"
    request:
      jsonrpc: "2.0"
      id: "get-contents-invalid-maxbytes"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: "jobs/ImportCatalog/Job-ImportCatalog-0987654321.log"
          maxBytes: 0
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-invalid-maxbytes"
        result:
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:Invalid maxBytes"
          isError: true
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "800ms"

  # === Content Structure Validation ===
  - it: "should return exactly one content element"
    request:
      jsonrpc: "2.0"
      id: "get-contents-single-element"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: "jobs/ImportCatalog/Job-ImportCatalog-0987654321.log"
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-single-element"
        result:
          content: "match:arrayLength:1"
          isError: "match:type:boolean"
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "1500ms"

  - it: "should return proper content types"
    request:
      jsonrpc: "2.0"
      id: "get-contents-types"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: "jobs/ImportCatalog/Job-ImportCatalog-0987654321.log"
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-types"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:type:string"
          isError: "match:type:boolean"
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "1500ms"
