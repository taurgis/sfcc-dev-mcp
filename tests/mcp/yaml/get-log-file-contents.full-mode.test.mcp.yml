---
description: "Test get_log_file_contents tool in full mode"
tests:
  # Basic functionality tests
  - it: "should get contents of a specific log file"
    request:
      jsonrpc: "2.0"
      id: "get-contents-basic"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: "jobs/ImportCatalog/Job-ImportCatalog-0987654321.log"
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-basic"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:type:string"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  # Content structure validation tests
  - it: "should include file header information in response"
    request:
      jsonrpc: "2.0"
      id: "get-contents-header"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: "jobs/ImportCatalog/Job-ImportCatalog-0987654321.log"
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-header"
        result:
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:Log File Contents:"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  - it: "should include total lines count in response"
    request:
      jsonrpc: "2.0"
      id: "get-contents-lines"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: "jobs/ImportCatalog/Job-ImportCatalog-0987654321.log"
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-lines"
        result:
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:Total lines:"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  - it: "should include content size in response"
    request:
      jsonrpc: "2.0"
      id: "get-contents-size"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: "jobs/ImportCatalog/Job-ImportCatalog-0987654321.log"
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-size"
        result:
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:Content size:"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  - it: "should include log entries with timestamps"
    request:
      jsonrpc: "2.0"
      id: "get-contents-timestamps"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: "jobs/ImportCatalog/Job-ImportCatalog-0987654321.log"
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-timestamps"
        result:
          content:
            match:arrayElements:
              match:partial:
                text: "match:regex:\\[\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{3} GMT\\]"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  # Parameter validation tests
  - it: "should work with maxBytes parameter"
    request:
      jsonrpc: "2.0"
      id: "get-contents-maxbytes"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: "jobs/ImportCatalog/Job-ImportCatalog-0987654321.log"
          maxBytes: 500
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-maxbytes"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:type:string"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  - it: "should respect maxBytes parameter and validate content structure"
    request:
      jsonrpc: "2.0"
      id: "get-contents-maxbytes-length"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: "jobs/ImportCatalog/Job-ImportCatalog-0987654321.log"
          maxBytes: 1000
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-maxbytes-length"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:contains:Log File Contents:"  # Should have header
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  - it: "should handle small maxBytes parameter and include required headers"
    request:
      jsonrpc: "2.0"
      id: "get-contents-small-maxbytes"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: "jobs/ImportCatalog/Job-ImportCatalog-0987654321.log"
          maxBytes: 100
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-small-maxbytes"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:contains:Log File Contents:"  # Should still have header even with small maxBytes
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  - it: "should handle large maxBytes parameter and include content details"
    request:
      jsonrpc: "2.0"
      id: "get-contents-large-maxbytes"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: "jobs/ImportCatalog/Job-ImportCatalog-0987654321.log"
          maxBytes: 10000
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-large-maxbytes"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:contains:Content size:"  # Should have substantial content
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  - it: "should work with tailOnly parameter"
    request:
      jsonrpc: "2.0"
      id: "get-contents-tailonly"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: "jobs/ImportCatalog/Job-ImportCatalog-0987654321.log"
          tailOnly: true
          maxBytes: 10
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-tailonly"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:type:string"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  - it: "should work with both maxBytes and tailOnly parameters"
    request:
      jsonrpc: "2.0"
      id: "get-contents-combined"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: "jobs/ImportCatalog/Job-ImportCatalog-0987654321.log"
          maxBytes: 1000
          tailOnly: true
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-combined"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:type:string"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  - it: "should respect maxBytes limit when combined with tailOnly and validate structure"
    request:
      jsonrpc: "2.0"
      id: "get-contents-combined-length"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: "jobs/ImportCatalog/Job-ImportCatalog-0987654321.log"
          maxBytes: 500
          tailOnly: true
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-combined-length"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:contains:Total lines:"  # Should have content with line count
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  # Error handling tests
  - it: "should handle non-existent file gracefully"
    request:
      jsonrpc: "2.0"
      id: "get-contents-notfound"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: "nonexistent-file.log"
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-notfound"
        result:
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:Failed to get_log_file_contents"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  - it: "should handle missing filename parameter"
    request:
      jsonrpc: "2.0"
      id: "get-contents-missing-filename"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-missing-filename"
        result:
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:Error"
          isError: true
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "800ms"

  - it: "should handle empty filename parameter"
    request:
      jsonrpc: "2.0"
      id: "get-contents-empty-filename"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: ""
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-empty-filename"
        result:
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:Error"
          isError: true
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "800ms"

  # Performance validation tests
  - it: "should meet performance requirements for small files"
    request:
      jsonrpc: "2.0"
      id: "get-contents-performance"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: "jobs/ImportCatalog/Job-ImportCatalog-0987654321.log"
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-performance"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:type:string"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "1500ms"

  - it: "should meet performance requirements with maxBytes limit"
    request:
      jsonrpc: "2.0"
      id: "get-contents-performance-limited"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: "jobs/ImportCatalog/Job-ImportCatalog-0987654321.log"
          maxBytes: 500
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-performance-limited"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:type:string"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "1000ms"

  # Content type and format validation
  - it: "should return proper content structure"
    request:
      jsonrpc: "2.0"
      id: "get-contents-structure"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: "jobs/ImportCatalog/Job-ImportCatalog-0987654321.log"
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-structure"
        result:
          content: "match:type:array"
          isError: "match:type:boolean"
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  - it: "should have exactly one content element"
    request:
      jsonrpc: "2.0"
      id: "get-contents-single-element"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: "jobs/ImportCatalog/Job-ImportCatalog-0987654321.log"
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-single-element"
        result:
          content: "match:arrayLength:1"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  # Edge case tests for maxBytes string length validation
  - it: "should handle zero maxBytes parameter and return error"
    request:
      jsonrpc: "2.0"
      id: "get-contents-zero-maxbytes"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: "jobs/ImportCatalog/Job-ImportCatalog-0987654321.log"
          maxBytes: 0
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-zero-maxbytes"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:contains:Invalid maxBytes"  # Should return validation error
          isError: true
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  - it: "should handle very small maxBytes parameter and include headers"
    request:
      jsonrpc: "2.0"
      id: "get-contents-tiny-maxbytes"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: "jobs/ImportCatalog/Job-ImportCatalog-0987654321.log"
          maxBytes: 10
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-tiny-maxbytes"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "\"# Log File Contents: jobs/ImportCatalog/Job-ImportCatalog-0987654321.log (full read)\\n\\nTotal lines: 1\\nContent size: 10 bytes\\n\\n---\\n\\n[2025-09-1\""  # Should have minimal content with headers
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  - it: "should validate content quality scales with larger maxBytes parameter"
    request:
      jsonrpc: "2.0"
      id: "get-contents-scaling-maxbytes"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: "jobs/ImportCatalog/Job-ImportCatalog-0987654321.log"
          maxBytes: 2000
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-scaling-maxbytes"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:contains:INFO"  # Should have substantial log content with log entries
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  # Edge case tests
  - it: "should handle numeric maxBytes parameter"
    request:
      jsonrpc: "2.0"
      id: "get-contents-numeric-maxbytes"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: "jobs/ImportCatalog/Job-ImportCatalog-0987654321.log"
          maxBytes: 20
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-numeric-maxbytes"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "\"# Log File Contents: jobs/ImportCatalog/Job-ImportCatalog-0987654321.log (full read)\\n\\nTotal lines: 1\\nContent size: 20 bytes\\n\\n---\\n\\n[2025-09-14 17:18:55\""
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  - it: "should handle boolean tailOnly parameter"
    request:
      jsonrpc: "2.0"
      id: "get-contents-boolean-tailonly"
      method: "tools/call"
      params:
        name: "get_log_file_contents"
        arguments:
          filename: "jobs/ImportCatalog/Job-ImportCatalog-0987654321.log"
          tailOnly: false
    expect:
      response:
        jsonrpc: "2.0"
        id: "get-contents-boolean-tailonly"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:type:string"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"
