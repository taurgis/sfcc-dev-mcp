description: "Docs-only: get_available_sfra_documents tool tests"
config: ./aegis.config.docs-only.json

# We first list tools to ensure the tool exists in docs-only mode, then call it.
tests:
  - it: "should have get_available_sfra_documents in tools list"
    request:
      jsonrpc: "2.0"
      id: "list-sfra-docs-1"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "list-sfra-docs-1"
        result:
          tools:
            match:arrayElements:
              match:partial:
                name: "match:type:string"
          match:extractField: "tools.*.name"
          value: "match:arrayContains:get_available_sfra_documents"

  - it: "should return an array JSON string of sfra documents in text content"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-1"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-1"
        result:
          isError: false
          content:
            match:arrayElements:
              match:partial:
                type: "text"
                text: "match:regex:\\[[\\s\\S]*querystring[\\s\\S]*server[\\s\\S]*cart[\\s\\S]*stores[\\s\\S]*\\]" # array JSON includes expected doc names
      stderr: toBeEmpty

  - it: "should include core category documents (querystring, server, request, response, render)"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-2"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-2"
        result:
          isError: false
          content:
            match:arrayElements:
              match:partial:
                type: "text"
                text: "match:contains:querystring"
      stderr: toBeEmpty

  - it: "should contain product and store model documents (product-full, product-tile, store, stores)"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-3"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-3"
        result:
          isError: false
          content:
            match:arrayElements:
              match:partial:
                type: "text"
                text: "match:contains:product-full"
      stderr: toBeEmpty

  - it: "should not return error when called without arguments (empty object)"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-4"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-4"
        result:
          isError: false
          content: "match:type:array"
      stderr: toBeEmpty

  - it: "should include pricing documents (price-default, price-range, price-tiered)"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-5"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-5"
        result:
          isError: false
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:price-default"
      stderr: toBeEmpty

  - it: "should tolerate extraneous empty arguments object (idempotent behavior)"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-6"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-6"
        result:
          match:partial:
            isError: false
      stderr: toBeEmpty

  - it: "should respond within acceptable performance threshold"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-7"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-7"
        result:
          match:partial:
            isError: false
      performance:
        maxResponseTime: "800ms" # docs listing should be fast but allow CI variance
      stderr: toBeEmpty

  - it: "should include multiple distinct categories (core, order, product, pricing, store)"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-8"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-8"
        result:
          isError: false
          content:
            match:arrayElements:
              match:partial:
                text: "match:regex:(core|order|product|pricing|store)"
      stderr: toBeEmpty

  - it: "should expose at least 18 documents (count via regex on JSON array)"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-9"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-9"
        result:
          isError: false
          content:
            match:arrayElements:
              match:partial:
                # Require at least 18 occurrences of the JSON key "name" (non-greedy across intervening content)
                # NOTE: The prior insanely large quantifier still matched because the engine satisfied the pattern once; quantifier applies to group occurrences.
                # This pattern enforces a realistic lower bound of 18.
                text: "match:regex:(?:\\\"name\\\"[\\s\\S]*?){18,}"
      stderr: toBeEmpty

  # Individual presence tests replacing aggregated lookahead test for better failure diagnostics
  # Core documents
  - it: "should include doc name: server"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-9b-server"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-9b-server"
        result:
          isError: false
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:server"
      stderr: toBeEmpty

  - it: "should include doc name: request"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-9b-request"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-9b-request"
        result:
          isError: false
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:request"
      stderr: toBeEmpty

  - it: "should include doc name: response"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-9b-response"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-9b-response"
        result:
          isError: false
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:response"
      stderr: toBeEmpty

  - it: "should include doc name: querystring"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-9b-querystring"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-9b-querystring"
        result:
          isError: false
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:querystring"
      stderr: toBeEmpty

  - it: "should include doc name: render"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-9b-render"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-9b-render"
        result:
          isError: false
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:render"
      stderr: toBeEmpty

  # Functional / model documents
  - it: "should include doc name: cart"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-9b-cart"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-9b-cart"
        result:
          isError: false
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:cart"
      stderr: toBeEmpty

  - it: "should include doc name: product-full"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-9b-product-full"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-9b-product-full"
        result:
          isError: false
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:product-full"
      stderr: toBeEmpty

  - it: "should include doc name: product-tile"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-9b-product-tile"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-9b-product-tile"
        result:
          isError: false
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:product-tile"
      stderr: toBeEmpty

  # Pricing documents
  - it: "should include doc name: price-default"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-9b-price-default"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-9b-price-default"
        result:
          isError: false
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:price-default"
      stderr: toBeEmpty

  - it: "should include doc name: price-range"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-9b-price-range"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-9b-price-range"
        result:
          isError: false
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:price-range"
      stderr: toBeEmpty

  - it: "should include doc name: price-tiered"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-9b-price-tiered"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-9b-price-tiered"
        result:
          isError: false
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:price-tiered"
      stderr: toBeEmpty

  # Store documents
  - it: "should include doc name: store"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-9b-store"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-9b-store"
        result:
          isError: false
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:store"
      stderr: toBeEmpty

  - it: "should include doc name: stores"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-9b-stores"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-9b-stores"
        result:
          isError: false
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:stores"
      stderr: toBeEmpty

  # Customer/account related documents
  - it: "should include doc name: account"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-9b-account"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-9b-account"
        result:
          isError: false
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:account"
      stderr: toBeEmpty

  - it: "should include doc name: billing"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-9b-billing"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-9b-billing"
        result:
          isError: false
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:billing"
      stderr: toBeEmpty

  - it: "should include doc name: shipping"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-9b-shipping"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-9b-shipping"
        result:
          isError: false
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:shipping"
      stderr: toBeEmpty

  - it: "should include doc name: address"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-9b-address"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-9b-address"
        result:
          isError: false
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:address"
      stderr: toBeEmpty

  - it: "should include doc name: locale"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-9b-locale"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-9b-locale"
        result:
          isError: false
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:locale"
      stderr: toBeEmpty

  - it: "should return JSON-RPC method not found error for invalid method name"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-error-1"
      method: "tools/call_WRONG" # invalid base method to trigger JSON-RPC error
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-error-1"
        error:
          code: "match:type:number"
          message: "match:contains:Method"

  - it: "should include required keys in each document object at least once (name,title,category,filename)"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-ext-1"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-ext-1"
        result:
          isError: false
          content:
            match:arrayElements:
              match:partial:
                # Newline-safe pattern ensuring all keys appear at least once in any order across pretty-printed JSON
                text: "match:regex:[\\s\\S]*\"name\"[\\s\\S]*\"title\"[\\s\\S]*\"category\"[\\s\\S]*\"filename\"[\\s\\S]*"
      stderr: toBeEmpty

  - it: "should list multiple product model documents (at least 3 occurrences of 'product-')"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-ext-2"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-ext-2"
        result:
          isError: false
          content:
            match:arrayElements:
              match:partial:
                # Use a broad regex ensuring at least three product- tokens appear anywhere
                text: "match:regex:(?:product-)[\\s\\S]*(?:product-)[\\s\\S]*(?:product-)"
      stderr: toBeEmpty

  - it: "should have filenames ending with .md for multiple entries"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-ext-4"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-ext-4"
        result:
          isError: false
          content:
            match:arrayElements:
              match:partial:
                text: "match:regex:\"filename\"\\s*:\\s*\"[a-z0-9\\-]+\\.md\""
      stderr: toBeEmpty

  - it: "should respond faster than previous performance spec (tighten to 600ms)"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-ext-5"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-ext-5"
        result:
          match:partial:
            isError: false
      performance:
        maxResponseTime: "600ms"
      stderr: toBeEmpty

  - it: "should ignore unknown extraneous parameter without failing"
    request:
      jsonrpc: "2.0"
      id: "sfra-docs-ext-6"
      method: "tools/call"
      params:
        name: "get_available_sfra_documents"
        arguments:
          bogus: true
    expect:
      response:
        jsonrpc: "2.0"
        id: "sfra-docs-ext-6"
        result:
          match:partial:
            isError: false
      stderr: toBeEmpty


