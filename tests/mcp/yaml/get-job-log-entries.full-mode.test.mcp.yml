---
description: "Test get_job_log_entries tool in full mode - Aegis framework validation and core MCP functionality"
tests:
  # Core functionality tests - essential MCP protocol validation
  - it: "should retrieve job log entries with default parameters"
    request:
      jsonrpc: "2.0"
      id: "job-entries-default"
      method: "tools/call"
      params:
        name: "get_job_log_entries"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "job-entries-default"
        result:
          content:
            match:arrayElements:
              match:partial:
                type: "text"
                text: "match:contains:Latest"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  - it: "should respect limit parameter"
    request:
      jsonrpc: "2.0"
      id: "job-entries-limit"
      method: "tools/call"
      params:
        name: "get_job_log_entries"
        arguments:
          limit: 5
    expect:
      response:
        jsonrpc: "2.0"
        id: "job-entries-limit"
        result:
          content:
            match:arrayElements:
              match:partial:
                type: "text"
                text: "match:contains:Latest 5"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  # Parameter validation tests - level filtering (sample representative cases)
  - it: "should filter by error level"
    request:
      jsonrpc: "2.0"
      id: "job-entries-error"
      method: "tools/call"
      params:
        name: "get_job_log_entries"
        arguments:
          level: "error"
          limit: 3
    expect:
      response:
        jsonrpc: "2.0"
        id: "job-entries-error"
        result:
          content:
            match:arrayElements:
              match:partial:
                type: "text"
                text: "match:contains:error messages"
          isError: false
      stderr: "toBeEmpty"

  - it: "should filter by info level"
    request:
      jsonrpc: "2.0"
      id: "job-entries-info"
      method: "tools/call"
      params:
        name: "get_job_log_entries"
        arguments:
          level: "info"
          limit: 3
    expect:
      response:
        jsonrpc: "2.0"
        id: "job-entries-info"
        result:
          content:
            match:arrayElements:
              match:partial:
                type: "text"
                text: "match:contains:info messages"
          isError: false
      stderr: "toBeEmpty"

  # Job name filtering tests
  - it: "should filter by job name"
    request:
      jsonrpc: "2.0"
      id: "job-entries-by-name"
      method: "tools/call"
      params:
        name: "get_job_log_entries"
        arguments:
          jobName: "ProcessOrders"
          limit: 3
    expect:
      response:
        jsonrpc: "2.0"
        id: "job-entries-by-name"
        result:
          content:
            match:arrayElements:
              match:partial:
                type: "text"
                text: "match:contains:from job: ProcessOrders"
          isError: false
      stderr: "toBeEmpty"

  - it: "should combine job name and level parameters"
    request:
      jsonrpc: "2.0"
      id: "job-entries-name-level"
      method: "tools/call"
      params:
        name: "get_job_log_entries"
        arguments:
          jobName: "ImportCatalog"
          level: "info"
          limit: 3
    expect:
      response:
        jsonrpc: "2.0"
        id: "job-entries-name-level"
        result:
          content:
            match:arrayElements:
              match:partial:
                type: "text"
                text: "match:regex:.*info messages from job: ImportCatalog"
          isError: false
      stderr: "toBeEmpty"

  # Content structure validation - Aegis pattern matching capabilities
  - it: "should contain SystemJobThread pattern in job logs"
    request:
      jsonrpc: "2.0"
      id: "job-entries-content"
      method: "tools/call"
      params:
        name: "get_job_log_entries"
        arguments:
          limit: 5
    expect:
      response:
        jsonrpc: "2.0"
        id: "job-entries-content"
        result:
          content:
            match:arrayElements:
              match:partial:
                type: "text"
                text: "match:contains:SystemJobThread"
          isError: false
      stderr: "toBeEmpty"

  - it: "should include proper GMT timestamps"
    request:
      jsonrpc: "2.0"
      id: "job-entries-timestamps"
      method: "tools/call"
      params:
        name: "get_job_log_entries"
        arguments:
          limit: 3
    expect:
      response:
        jsonrpc: "2.0"
        id: "job-entries-timestamps"
        result:
          content:
            match:arrayElements:
              match:partial:
                type: "text"
                text: "match:regex:\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{3} GMT"
          isError: false
      stderr: "toBeEmpty"

  # Error handling tests - essential MCP error response validation
  - it: "should handle zero limit with proper error response"
    request:
      jsonrpc: "2.0"
      id: "job-entries-zero-limit"
      method: "tools/call"
      params:
        name: "get_job_log_entries"
        arguments:
          limit: 0
    expect:
      response:
        jsonrpc: "2.0"
        id: "job-entries-zero-limit"
        result:
          content:
            match:arrayElements:
              match:partial:
                type: "text"
                text: "match:contains:Invalid limit"
          isError: true
      stderr: "toBeEmpty"

  - it: "should handle invalid log level gracefully"
    request:
      jsonrpc: "2.0"
      id: "job-entries-invalid-level"
      method: "tools/call"
      params:
        name: "get_job_log_entries"
        arguments:
          level: "invalid"
          limit: 5
    expect:
      response:
        jsonrpc: "2.0"
        id: "job-entries-invalid-level"
        result:
          content:
            match:arrayElements:
              match:partial:
                type: "text"
                text: "match:contains:Error"
          isError: true
      stderr: "toBeEmpty"

  - it: "should handle nonexistent job name gracefully"
    request:
      jsonrpc: "2.0"
      id: "job-entries-nonexistent-job"
      method: "tools/call"
      params:
        name: "get_job_log_entries"
        arguments:
          jobName: "NonExistentJob123"
          limit: 3
    expect:
      response:
        jsonrpc: "2.0"
        id: "job-entries-nonexistent-job"
        result:
          content:
            match:arrayElements:
              match:partial:
                type: "text"
                text: "match:contains:No job logs found"
          isError: false
      stderr: "toBeEmpty"

  # Performance test - single representative case for aegis framework validation
  - it: "should respond within reasonable time for standard request"
    request:
      jsonrpc: "2.0"
      id: "job-entries-performance"
      method: "tools/call"
      params:
        name: "get_job_log_entries"
        arguments:
          limit: 10
    expect:
      response:
        jsonrpc: "2.0"
        id: "job-entries-performance"
        result:
          content:
            match:arrayElements:
              match:partial:
                type: "text"
                text: "match:type:string"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2500ms"
