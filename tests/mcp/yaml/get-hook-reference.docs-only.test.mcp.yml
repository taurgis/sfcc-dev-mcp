description: "get_hook_reference docs-only tests"

# Chosen as next untested docs-only tool (no existing YAML test file). Covers success (ocapi_hooks, scapi_hooks), empty result (invalid guideName), structure validation, field extraction, and performance.

tests:
  - it: "should list tools include get_hook_reference"
    request:
      jsonrpc: "2.0"
      id: "list-hooks-tool"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "list-hooks-tool"
        result:
          tools: "match:type:array"
          match:extractField: "tools.*.name"
          value: "match:arrayContains:get_hook_reference"
      stderr: "toBeEmpty"

  - it: "should retrieve OCAPI hook reference with categories"
    request:
      jsonrpc: "2.0"
      id: "ocapi-hooks-1"
      method: "tools/call"
      params:
        name: "get_hook_reference"
        arguments:
          guideName: "ocapi_hooks"
    expect:
      response:
        jsonrpc: "2.0"
        id: "ocapi-hooks-1"
        result:
          content:
            match:arrayElements:
              match:partial:
                type: "text"
                text: "match:contains:Shop API Hooks"
          isError: false
      performance:
        maxResponseTime: "1200ms"
      stderr: "toBeEmpty"

  - it: "should retrieve SCAPI hook reference including signatures"
    request:
      jsonrpc: "2.0"
      id: "scapi-hooks-1"
      method: "tools/call"
      params:
        name: "get_hook_reference"
        arguments:
          guideName: "scapi_hooks"
    expect:
      response:
        jsonrpc: "2.0"
        id: "scapi-hooks-1"
        result:
          content:
            match:arrayElements:
              match:partial:
                type: "text"
                text: "match:contains:Shopper Baskets API Hooks"
          isError: false
      performance:
        maxResponseTime: "1200ms"
      stderr: "toBeEmpty"

  - it: "should return empty array content for invalid guideName without error"
    request:
      jsonrpc: "2.0"
      id: "invalid-hooks-1"
      method: "tools/call"
      params:
        name: "get_hook_reference"
        arguments:
          guideName: "invalid_hooks"
    expect:
      response:
        jsonrpc: "2.0"
        id: "invalid-hooks-1"
        result:
          content:
            - type: "text"
              text: "match:regex:^\\[\\s*\\]$"
          isError: false
      performance:
        maxResponseTime: "800ms"
      stderr: "toBeEmpty"

  - it: "should contain at least one hook endpoint pattern in OCAPI response"
    request:
      jsonrpc: "2.0"
      id: "ocapi-hooks-endpoint-pattern"
      method: "tools/call"
      params:
        name: "get_hook_reference"
        arguments:
          guideName: "ocapi_hooks"
    expect:
      response:
        jsonrpc: "2.0"
        id: "ocapi-hooks-endpoint-pattern"
        result:
          content:
            match:arrayElements:
              match:partial:
                text: "match:regex:[\\s\\S]*GET /products/\\{id\\}[\\s\\S]*"
          isError: false
      performance:
        maxResponseTime: "1200ms"
      stderr: "toBeEmpty"

  - it: "should contain at least one SCAPI signature pattern in response"
    request:
      jsonrpc: "2.0"
      id: "scapi-hooks-signature-pattern"
      method: "tools/call"
      params:
        name: "get_hook_reference"
        arguments:
          guideName: "scapi_hooks"
    expect:
      response:
        jsonrpc: "2.0"
        id: "scapi-hooks-signature-pattern"
        result:
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:modifyPOSTResponse(basket : dw.order.Basket"
          isError: false
      performance:
        maxResponseTime: "1200ms"
      stderr: "toBeEmpty"

  - it: "should reject missing guideName with error flag and message"
    request:
      jsonrpc: "2.0"
      id: "missing-param-1"
      method: "tools/call"
      params:
        name: "get_hook_reference"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "missing-param-1"
        result:
          content:
            match:arrayElements:
              match:partial:
                type: "text"
                text: "match:contains:guideName must be a non-empty string"
          isError: true
      performance:
        maxResponseTime: "600ms"
      stderr: "toBeEmpty"

  - it: "should reject empty guideName with same validation error"
    request:
      jsonrpc: "2.0"
      id: "empty-param-1"
      method: "tools/call"
      params:
        name: "get_hook_reference"
        arguments:
          guideName: ""
    expect:
      response:
        jsonrpc: "2.0"
        id: "empty-param-1"
        result:
          content:
            match:arrayElements:
              match:partial:
                type: "text"
                text: "match:contains:guideName must be a non-empty string"
          isError: true
      performance:
        maxResponseTime: "600ms"
      stderr: "toBeEmpty"

  - it: "OCAPI response should include multiple categories"
    request:
      jsonrpc: "2.0"
      id: "ocapi-categories-1"
      method: "tools/call"
      params:
        name: "get_hook_reference"
        arguments:
          guideName: "ocapi_hooks"
    expect:
      response:
        jsonrpc: "2.0"
        id: "ocapi-categories-1"
        result:
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:Data API Hooks"
          isError: false
      performance:
        maxResponseTime: "1200ms"
      stderr: "toBeEmpty"

  - it: "SCAPI response should include multiple categories"
    request:
      jsonrpc: "2.0"
      id: "scapi-categories-1"
      method: "tools/call"
      params:
        name: "get_hook_reference"
        arguments:
          guideName: "scapi_hooks"
    expect:
      response:
        jsonrpc: "2.0"
        id: "scapi-categories-1"
        result:
          content:
            match:arrayElements:
              match:partial:
                text: "match:contains:Shopper Orders API Hooks"
          isError: false
      performance:
        maxResponseTime: "1200ms"
      stderr: "toBeEmpty"

  - it: "SCAPI response should contain multiple distinct hook signatures"
    request:
      jsonrpc: "2.0"
      id: "scapi-signatures-1"
      method: "tools/call"
      params:
        name: "get_hook_reference"
        arguments:
          guideName: "scapi_hooks"
    expect:
      response:
        jsonrpc: "2.0"
        id: "scapi-signatures-1"
        result:
          content:
            match:arrayElements:
              match:partial:
                text: "match:regex:[\\s\\S]*beforePOST\\(basket : dw.order.Basket[\\s\\S]*afterPOST\\(basket : dw.order.Basket[\\s\\S]*"
          isError: false
      performance:
        maxResponseTime: "1500ms"
      stderr: "toBeEmpty"

  - it: "OCAPI response should have multiple hookPoints for basket POST"
    request:
      jsonrpc: "2.0"
      id: "ocapi-multiple-hookpoints-1"
      method: "tools/call"
      params:
        name: "get_hook_reference"
        arguments:
          guideName: "ocapi_hooks"
    expect:
      response:
        jsonrpc: "2.0"
        id: "ocapi-multiple-hookpoints-1"
        result:
          content:
            match:arrayElements:
              match:partial:
                text: "match:regex:[\\s\\S]*POST /baskets[\\s\\S]*modifyPOSTResponse[\\s\\S]*validateBasket[\\s\\S]*"
          isError: false
      performance:
        maxResponseTime: "1500ms"
      stderr: "toBeEmpty"

  - it: "SCAPI response should NOT contain unrelated error text"
    request:
      jsonrpc: "2.0"
      id: "scapi-negative-1"
      method: "tools/call"
      params:
        name: "get_hook_reference"
        arguments:
          guideName: "scapi_hooks"
    expect:
      response:
        jsonrpc: "2.0"
        id: "scapi-negative-1"
        result:
          content:
            match:arrayElements:
              match:partial:
                text: "match:not:contains:guideName must be a non-empty string"
          isError: false
      performance:
        maxResponseTime: "1200ms"
      stderr: "toBeEmpty"

  - it: "SCAPI content payload should be reasonably large (length > 500 chars)"
    request:
      jsonrpc: "2.0"
      id: "scapi-size-1"
      method: "tools/call"
      params:
        name: "get_hook_reference"
        arguments:
          guideName: "scapi_hooks"
    expect:
      response:
        jsonrpc: "2.0"
        id: "scapi-size-1"
        result:
          content:
            match:arrayElements:
              match:partial:
                text: "match:regex:^[\\s\\S]{500,}$"
          isError: false
      performance:
        maxResponseTime: "1500ms"
      stderr: "toBeEmpty"
