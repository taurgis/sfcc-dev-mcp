# ==================================================================================
# SFCC MCP Server - get_code_versions Tool YAML Tests (Docs-Only Mode)
# Validates that code version tools are NOT available in docs-only mode
# This tool requires SFCC credentials and should not be available without them
# 
# Quick Test Commands:
# aegis "tests/mcp/yaml/get-code-versions.docs-only.test.mcp.yml" --config "aegis.config.docs-only.json" --verbose
# aegis query get_code_versions '{}' --config "aegis.config.docs-only.json"
# ==================================================================================

description: "get_code_versions tool docs-only mode tests - Tool unavailability validation"

tests:
  # ==================================================================================
  # TOOL UNAVAILABILITY IN DOCS-ONLY MODE
  # ==================================================================================
  - it: "should NOT list get_code_versions tool in docs-only mode"
    request:
      jsonrpc: "2.0"
      id: "tool-not-available-docs"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "tool-not-available-docs"
        result:
          tools:
            match:arrayElements:
              match:partial:
                name: "match:type:string"
                description: "match:type:string"
          match:extractField: "tools.*.name"
          value: "match:not:arrayContains:get_code_versions"
      stderr: "toBeEmpty"

  # ==================================================================================
  # AUTHENTICATION ERROR TESTS (Tool Can Be Called But Returns Error)
  # ==================================================================================
  - it: "should return authentication error when calling get_code_versions in docs-only mode"
    request:
      jsonrpc: "2.0"
      id: "auth-error-default"
      method: "tools/call"
      params:
        name: "get_code_versions"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "auth-error-default"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:contains:OCAPI client not configured"
          isError: true
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "1000ms"

  - it: "should return consistent error message for authentication failure"
    request:
      jsonrpc: "2.0"
      id: "auth-error-consistent"
      method: "tools/call"
      params:
        name: "get_code_versions"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "auth-error-consistent"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:regex:Error[\\s\\S]*OCAPI[\\s\\S]*not configured[\\s\\S]*"
          isError: true
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "1000ms"

  # ==================================================================================
  # ERROR RESPONSE VALIDATION
  # ==================================================================================
  - it: "should return proper error structure in docs-only mode"
    request:
      jsonrpc: "2.0"
      id: "error-structure"
      method: "tools/call"
      params:
        name: "get_code_versions"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "error-structure"
        result:
          content:
            match:arrayElements:
              match:partial:
                type: "text"
                text: "match:type:string"
          isError: true
      stderr: "toBeEmpty"

  - it: "should handle parameters gracefully even when returning error"
    request:
      jsonrpc: "2.0"
      id: "error-with-params"
      method: "tools/call"
      params:
        name: "get_code_versions"
        arguments:
          extraParam: "ignored"
    expect:
      response:
        jsonrpc: "2.0"
        id: "error-with-params"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:contains:OCAPI client not configured"
          isError: true
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "1000ms"

  # ==================================================================================
  # PERFORMANCE TESTS FOR ERROR RESPONSES
  # ==================================================================================
  - it: "should fail fast when credentials not available"
    request:
      jsonrpc: "2.0"
      id: "fail-fast"
      method: "tools/call"
      params:
        name: "get_code_versions"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "fail-fast"
        result:
          content:
            match:arrayElements:
              match:partial:
                type: "text"
          isError: true
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "500ms"

  - it: "should maintain consistent error performance"
    request:
      jsonrpc: "2.0"
      id: "error-performance-consistency"
      method: "tools/call"
      params:
        name: "get_code_versions"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "error-performance-consistency"
        result:
          content:
            match:arrayElements:
              match:partial:
                type: "text"
          isError: true
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "800ms"

  # ==================================================================================
  # NEGATIVE TESTING - Invalid Tool Calls
  # ==================================================================================
  - it: "should handle invalid method calls gracefully"
    request:
      jsonrpc: "2.0"
      id: "invalid-method"
      method: "tools/call_invalid"
      params:
        name: "get_code_versions"
        arguments: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "invalid-method"
        error:
          code: "match:type:number"
          message: "match:type:string"
      stderr: "toBeEmpty"