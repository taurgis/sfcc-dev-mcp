---
description: "Test search_job_logs_by_name tool in full mode - focused on aegis framework validation"
tests:
  # Basic functionality - test aegis with simple patterns
  - it: "should search for job logs and validate basic structure"
    request:
      jsonrpc: "2.0"
      id: "search-job-basic"
      method: "tools/call"
      params:
        name: "search_job_logs_by_name"
        arguments:
          jobName: "Import"
    expect:
      response:
        jsonrpc: "2.0"
        id: "search-job-basic"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:regex:\"(?:Found \\d+ job logs|No job logs found)"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  - it: "should return exact empty result format for non-existent job"
    request:
      jsonrpc: "2.0"
      id: "search-job-empty-result"
      method: "tools/call"
      params:
        name: "search_job_logs_by_name"
        arguments:
          jobName: "NonExistentJobXYZ"
    expect:
      response:
        jsonrpc: "2.0"
        id: "search-job-empty-result"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "\"No job logs found.\""
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "1500ms"

  - it: "should include job emoji and basic details when found"
    request:
      jsonrpc: "2.0"
      id: "search-job-details"
      method: "tools/call"
      params:
        name: "search_job_logs_by_name"
        arguments:
          jobName: "Import"
          limit: 1
    expect:
      response:
        jsonrpc: "2.0"
        id: "search-job-details"
        result:
          content:
            match:arrayElements:
              type: "text"
              # Test for job emoji presence
              text: "match:contains:ðŸ”§ Job:"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  # Error validation - test exact error messages
  - it: "should reject empty job name with exact error message"
    request:
      jsonrpc: "2.0"
      id: "search-job-empty-name"
      method: "tools/call"
      params:
        name: "search_job_logs_by_name"
        arguments:
          jobName: ""
    expect:
      response:
        jsonrpc: "2.0"
        id: "search-job-empty-name"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "Error: jobName must be a non-empty string"
          isError: true
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "800ms"

  - it: "should reject invalid limit with specific error format"
    request:
      jsonrpc: "2.0"
      id: "search-job-invalid-limit"
      method: "tools/call"
      params:
        name: "search_job_logs_by_name"
        arguments:
          jobName: "Import"
          limit: -1
    expect:
      response:
        jsonrpc: "2.0"
        id: "search-job-invalid-limit"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "Error: Invalid limit '-1' for tool. Must be between 1 and 1000"
          isError: true
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "800ms"

  # Parameter handling - test limit behavior
  - it: "should respect custom limit parameter"
    request:
      jsonrpc: "2.0"
      id: "search-job-custom-limit"
      method: "tools/call"
      params:
        name: "search_job_logs_by_name"
        arguments:
          jobName: "Import"
          limit: 5
    expect:
      response:
        jsonrpc: "2.0"
        id: "search-job-custom-limit"
        result:
          content:
            match:arrayElements:
              type: "text"
              text: "match:type:string"
          isError: false
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"

  # Response structure validation
  - it: "should maintain consistent MCP response structure"
    request:
      jsonrpc: "2.0"
      id: "search-job-structure"
      method: "tools/call"
      params:
        name: "search_job_logs_by_name"
        arguments:
          jobName: "Import"
    expect:
      response:
        jsonrpc: "2.0"
        id: "search-job-structure"
        result:
          match:partial:
            content: "match:arrayLength:1"
            isError: "match:type:boolean"
      stderr: "toBeEmpty"
    performance:
      maxResponseTime: "2000ms"
