---
description: SFRA controller development patterns and best practices
globs: ["**/controllers/**/*.js", "**/cartridge/controllers/**/*.js"]
alwaysApply: false
---

# SFRA Controller Development

Use this rule when creating or modifying SFRA controllers.

## Required MCP Tools Sequence

1. `mcp_sfcc-dev_get_best_practice_guide` with guideName: "sfra_controllers"
2. `mcp_sfcc-dev_get_sfra_document` with documentName: "server"
3. `mcp_sfcc-dev_search_best_practices` with query: "security"

## Controller Template Pattern

```javascript
'use strict';

var server = require('server');
var CSRFProtection = require('*/cartridge/scripts/middleware/csrf');
var userLoggedIn = require('*/cartridge/scripts/middleware/userLoggedIn');

/**
 * [Controller Name] - [Brief description]
 * Handles [specific functionality]
 */

server.get('Show', function (req, res, next) {
    try {
        // Input validation
        var viewData = {};

        // Business logic here

        res.render('template/templateName', viewData);
    } catch (e) {
        var Logger = require('dw/system/Logger').getLogger('controllers', 'ControllerName');
        Logger.error('Error in ControllerName-Show: {0}', e.message);

        res.setStatusCode(500);
        res.json({
            error: true,
            message: 'Internal server error'
        });
    }
    next();
});

module.exports = server.exports();
```

## Security Requirements

- Always include CSRF protection for forms
- Validate all input parameters
- Use proper authentication middleware
- Sanitize data before rendering
- Log errors without exposing sensitive information

## Performance Considerations

- Use caching middleware where appropriate
- Minimize database queries in loops
- Implement proper error boundaries
- Use efficient template rendering
